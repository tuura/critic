<?xml version="1.0" encoding="ASCII"?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
    <GraphType id="fantasi">
        <MessageTypes>
            <MessageType id="__init__" />
            <MessageType id="update">
                <Message>
                    <Scalar name="distance" type="uint16_t" />
                </Message>
            </MessageType>
            <MessageType id="td">
                <Message>
                    <Scalar type="uint16_t" name="level"/>
                    <Scalar type="int8_t" name="sentRec"/>
                    <Scalar type="uint8_t" name="num"/>
                    <Scalar type="uint8_t" name="reqBusy"/>
                </Message>
            </MessageType>
        </MessageTypes>
        <DeviceTypes>
            <DeviceType id="flipflop">
                <Properties>
                    <Scalar type="uint32_t" name="first"/>
                    <Scalar type="uint32_t" name="root"/>
                    <Scalar type="uint32_t" name="connections"/>
                    <Scalar type="uint32_t" name="children"/>
                    <Scalar type="uint32_t" name="level"/>
                </Properties>
                <State>
                    <Scalar type="uint32_t" name="distance"/>
                    <Scalar type="uint32_t" name="td_child_msgs"/>
                    <Scalar type="int16_t" name="sentRec"/>
                    <Scalar type="int16_t" name="td_sent_rec"/>
                    <Scalar type="uint8_t"  name="rts"/>
                    <Scalar type="uint8_t"  name="busy"/>
                    <Scalar type="uint8_t"  name="td_child_busy"/>
                    <Scalar type="uint8_t"  name="td_req_received"/>
                    <Scalar type="uint8_t" name="td_num"/>
                    <Scalar type="uint8_t"  name="td_rts"/>
                </State>

                <InputPin name="__init__" messageTypeId="__init__">
                    <OnReceive><![CDATA[

                        deviceState->distance = 0xffffffff; // INT_MAX

                        deviceState->rts = deviceProperties->f;
                        deviceState->busy = deviceProperties->f;

                        deviceState->td_child_msgs = 0;
                        deviceState->sentRec = 0;
                        deviceState->td_num = 0;
                        deviceState->td_sent_rec = 0;
                        deviceState->td_req_received = 0;

                 ]]></OnReceive>
                </InputPin>

                <InputPin name="in" messageTypeId="update">
                    <OnReceive><![CDATA[
                        deviceState->sentRec -= 1;

                        deviceState->busy = 1;
                        if (message->distance < deviceState->distance)
                        {
                            deviceState->distance = message->distance;
                            deviceState->rts = deviceState->rts + RTS_FLAG_out;

                            handler_log(0, "distance: %d", deviceState->distance);
                        } else {
                            deviceState->busy = 0;
                        }
                    ]]>
                </OnReceive>
                </InputPin>
                <OutputPin name="out" messageTypeId="update">
                    <OnSend><![CDATA[
                            deviceState->rts = 0;
                            message->distance = deviceState->distance+1;
                            deviceState->busy = 0;

                            deviceState->sentRec += deviceProperties->conns;
                        ]]></OnSend>
                </OutputPin>

                <!-- Termination Detection  -->
                <InputPin name="tree_in" messageTypeId="td">
                    <OnReceive><![CDATA[
                        if (message->num != deviceState->td_num) {
                            if (message->reqBusy == 1 && message->level == deviceProperties->level) {
                                deviceState->td_sent_rec = 0;
                                deviceState->td_child_busy = 0;
                                deviceState->td_req_received = 1;
                                deviceState->td_child_msgs = 0;
                                deviceState->td_num = message->num;
                                deviceState->td_rts = 1;
                            }
                        } else
                        {
                            if (deviceProperties->r == 1)
                            {
                                if (message->level == deviceProperties->level)
                                {
                                    if (message->reqBusy == 2)
                                    {
                                        deviceState->td_child_busy = 1;
                                        deviceState->td_child_msgs = 0;
                                        deviceState->td_sent_rec = 0;
                                        deviceState->td_req_received = 0;
                                        deviceState->td_rts = 1;
                                    } else {
                                        deviceState->td_child_msgs += 1;
                                        deviceState->td_sent_rec += message->sentRec;
                                    }

                                    if (deviceState->td_child_msgs == deviceProperties->childs)
                                    {
                                        deviceState->td_sent_rec += deviceState->sentRec;
                                        if (deviceState->td_sent_rec == 0)
                                        {
                                            handler_exit(0);
                                        } else
                                        {
                                            //handler_log(0, "Not worked");
                                            deviceState->td_req_received = 0;
                                            deviceState->td_child_msgs = 0;
                                            deviceState->td_sent_rec = 0;
                                            //handler_exit(1);
                                        }
                                    }
                                }
                            } else
                            {
                                if (message->level == deviceProperties->level && deviceState->td_child_busy != 1)
                                {
                                    if (message->reqBusy == 2)
                                    {
                                        deviceState->td_child_busy = 1;
                                        deviceState->td_child_msgs = 0;
                                        deviceState->td_sent_rec = 0;
                                        deviceState->td_req_received = 0;
                                        deviceState->td_rts = 1;
                                    } else
                                    {
                                        deviceState->td_child_msgs += 1;
                                        deviceState->td_sent_rec += message->sentRec;
                                    }

                                    if (deviceState->td_child_msgs == deviceProperties->childs)
                                    {
                                        deviceState->td_rts = 1;
                                    }
                                }
                            }
                        }

                ]]></OnReceive>
                </InputPin>

                <OutputPin name="tree_out" messageTypeId="td">
                    <OnSend><![CDATA[
                        deviceState->td_rts = 0;
                        if (deviceProperties->r == 1)
                        {
                            deviceState->td_req_received = 1;
                            if (deviceState->busy == 1)
                            {
                                message->level = 0xffff;
                                deviceState->td_num = deviceState->td_num + 1;
                                message->num = deviceState->td_num;
                                deviceState->td_req_received = 0;
                            } else
                            {
                                message->level = deviceProperties->level + 1;
                                message->reqBusy = 1;
                                deviceState->td_num = deviceState->td_num + 1;
                                deviceState->td_sent_rec = 0;
                                deviceState->td_child_msgs = 0;
                                message->num = deviceState->td_num;
                            }
                        } else {
                            if (deviceState->busy == 1)
                            {
                                message->level = deviceProperties->level - 1;
                                message->reqBusy = 2;
                                message->num = deviceState->td_num;
                                deviceState->td_child_msgs = 0;
                                deviceState->td_sent_rec = 0;
                                deviceState->td_req_received = 0;
                            } else if (deviceState->td_child_busy == 1)
                            {
                                message->level = deviceProperties->level - 1;
                                message->reqBusy = 2;
                                message->num = deviceState->td_num;
                                deviceState->td_child_msgs = 0;
                                deviceState->td_sent_rec = 0;
                                deviceState->td_req_received = 0;
                            } else if (deviceState->td_child_msgs == deviceProperties->childs)
                            {
                                message->num = deviceState->td_num;
                                message->level = deviceProperties->level - 1;
                                message->sentRec += deviceState->sentRec + deviceState->td_sent_rec;
                                //handler_log(0, "Dump: device->sentRec = %d, device->td_sent_rec = %d, message->sentRec = %d", deviceState->sentRec, deviceState->td_sent_rec, message->sentRec);
                            } else if (deviceState->td_req_received == 1)
                            {
                                message->num = deviceState->td_num;
                                message->level = deviceProperties->level + 1;
                                message->reqBusy = 1;
                            }
                        }


                 ]]></OnSend>
                </OutputPin>

                <ReadyToSend><![CDATA[
                    if (deviceState->rts == 1)
                    {
                        *readyToSend = RTS_FLAG_out;
                    }

                    if (deviceState->td_rts == 1)
                    {
                        *readyToSend = RTS_FLAG_tree_out;
                    } else if (deviceProperties->r == 1 && deviceState->td_req_received != 1)
                    {
                        *readyToSend = RTS_FLAG_tree_out;
                    }

             ]]></ReadyToSend>
            </DeviceType>
        </DeviceTypes>
    </GraphType>
    <GraphInstance graphTypeId="fantasi" id="graph0">
        <DeviceInstances>
            <DevI type="flipflop" id="v00">
                <P>"f": 0, "r": 0, "conns": 3, "childs": 0, "level": 2 </P>
            </DevI>
            <DevI type="flipflop" id="v01">
                <P>"f": 0, "r": 0, "conns": 3, "childs": 3, "level": 2 </P>
            </DevI>
            <DevI type="flipflop" id="v02">
                <P>"f": 0, "r": 0, "conns": 3, "childs": 1, "level": 1</P>
            </DevI>
            <DevI type="flipflop" id="v03">
                <P>"f": 0, "r": 0, "conns": 3, "childs": 0, "level": 2</P>
            </DevI>
            <DevI type="flipflop" id="v04">
                <P>"f": 0, "r": 0, "conns": 2, "childs": 0, "level": 2</P>
            </DevI>
            <DevI type="flipflop" id="v05">
                <P>"f": 0, "r": 0, "conns": 4, "childs": 1, "level": 3</P>
            </DevI>
            <DevI type="flipflop" id="v06">
                <P>"f": 0, "r": 0, "conns": 4, "childs": 1, "level": 2</P>
            </DevI>
            <DevI type="flipflop" id="v07">
                <P>"f": 0, "r": 0, "conns": 2, "childs": 5, "level": 1</P>
            </DevI>
            <DevI type="flipflop" id="v08">
                <P>"f": 0, "r": 0, "conns": 3, "childs": 0, "level": 4</P>
            </DevI>
            <DevI type="flipflop" id="v09">
                <P>"f": 0, "r": 0, "conns": 3, "childs": 0, "level": 3</P>
            </DevI>
            <DevI type="flipflop" id="v10">
                <P>"f": 0, "r": 0, "conns": 3, "childs": 0, "level": 3</P>
            </DevI>
            <DevI type="flipflop" id="v12">
                <P>"f": 0, "r": 1, "conns": 4, "childs": 2, "level": 0</P>
            </DevI>
            <DevI type="flipflop" id="v13">
                <P>"f": 0, "r": 0, "conns": 2, "childs": 1, "level": 2</P>
            </DevI>
            <DevI type="flipflop" id="v14">
                <P>"f": 0, "r": 0, "conns": 1, "childs": 0, "level": 3</P>
            </DevI>
            <DevI type="flipflop" id="v11">
                <P>"f": 1, "r": 0, "conns": 2, "childs": 0, "level": 3</P>
            </DevI>
        </DeviceInstances>
        <EdgeInstances>
            <EdgeI path="v05:in-v09:out" />
            <EdgeI path="v05:in-v01:out" />
            <EdgeI path="v05:in-v08:out" />
            <EdgeI path="v05:in-v02:out" />
            <EdgeI path="v04:in-v01:out" />
            <EdgeI path="v04:in-v08:out" />
            <EdgeI path="v07:in-v10:out" />
            <EdgeI path="v07:in-v03:out" />
            <EdgeI path="v06:in-v10:out" />
            <EdgeI path="v06:in-v09:out" />
            <EdgeI path="v06:in-v03:out" />
            <EdgeI path="v06:in-v02:out" />
            <EdgeI path="v01:in-v05:out" />
            <EdgeI path="v01:in-v04:out" />
            <EdgeI path="v01:in-v00:out" />
            <EdgeI path="v00:in-v01:out" />
            <EdgeI path="v00:in-v03:out" />
            <EdgeI path="v00:in-v02:out" />
            <EdgeI path="v03:in-v07:out" />
            <EdgeI path="v03:in-v06:out" />
            <EdgeI path="v03:in-v00:out" />
            <EdgeI path="v02:in-v05:out" />
            <EdgeI path="v02:in-v06:out" />
            <EdgeI path="v02:in-v00:out" />
            <EdgeI path="v12:in-v13:out" />
            <EdgeI path="v12:in-v11:out" />
            <EdgeI path="v12:in-v09:out" />
            <EdgeI path="v12:in-v14:out" />
            <EdgeI path="v13:in-v12:out" />
            <EdgeI path="v13:in-v10:out" />
            <EdgeI path="v10:in-v13:out" />
            <EdgeI path="v10:in-v07:out" />
            <EdgeI path="v10:in-v06:out" />
            <EdgeI path="v11:in-v12:out" />
            <EdgeI path="v11:in-v08:out" />
            <EdgeI path="v09:in-v05:out" />
            <EdgeI path="v09:in-v12:out" />
            <EdgeI path="v09:in-v06:out" />
            <EdgeI path="v08:in-v05:out" />
            <EdgeI path="v08:in-v04:out" />
            <EdgeI path="v08:in-v11:out" />
            <EdgeI path="v14:in-v12:out" />
            <EdgeI path="v12:tree_in-v07:tree_out"/>
            <EdgeI path="v07:tree_in-v12:tree_out"/>
            <EdgeI path="v07:tree_in-v13:tree_out"/>
            <EdgeI path="v13:tree_in-v07:tree_out"/>
            <EdgeI path="v13:tree_in-v05:tree_out"/>
            <EdgeI path="v05:tree_in-v13:tree_out"/>
            <EdgeI path="v07:tree_in-v03:tree_out"/>
            <EdgeI path="v03:tree_in-v07:tree_out"/>
            <EdgeI path="v07:tree_in-v01:tree_out"/>
            <EdgeI path="v01:tree_in-v07:tree_out"/>
            <EdgeI path="v01:tree_in-v09:tree_out"/>
            <EdgeI path="v09:tree_in-v01:tree_out"/>
            <EdgeI path="v12:tree_in-v02:tree_out"/>
            <EdgeI path="v02:tree_in-v12:tree_out"/>
            <EdgeI path="v07:tree_in-v00:tree_out"/>
            <EdgeI path="v00:tree_in-v07:tree_out"/>
            <EdgeI path="v01:tree_in-v11:tree_out"/>
            <EdgeI path="v11:tree_in-v01:tree_out"/>
            <EdgeI path="v07:tree_in-v06:tree_out"/>
            <EdgeI path="v06:tree_in-v07:tree_out"/>
            <EdgeI path="v05:tree_in-v08:tree_out"/>
            <EdgeI path="v08:tree_in-v05:tree_out"/>
            <EdgeI path="v01:tree_in-v14:tree_out"/>
            <EdgeI path="v14:tree_in-v01:tree_out"/>
            <EdgeI path="v06:tree_in-v10:tree_out"/>
            <EdgeI path="v10:tree_in-v06:tree_out"/>
            <EdgeI path="v02:tree_in-v04:tree_out"/>
            <EdgeI path="v04:tree_in-v02:tree_out"/>
        </EdgeInstances>
    </GraphInstance>
</Graphs>
